import json
import logging
import os
import threading
import time
from datetime import datetime, timedelta

from dotenv import load_dotenv
from telebot import TeleBot
from telebot.types import KeyboardButton, ReplyKeyboardMarkup

from constants import (
    CURRENT_MONTH,
    DUTY_EMOJI,
    GAIN_EMOJI,
    MONTHS,
    NEXT_MONTH,
    NOTIFICATION_TIME,
    VACATION_EMOJI,
    WEATHER_NOTIFICATION_TIME
)
from message import (
    create_duty_message,
    create_duty_notification_message,
    create_gain_message,
    create_gain_notification_message,
    create_month_message,
    create_vacation_message,
    create_weather_notification_message
)
from utils import check_department

load_dotenv()
bot_token = os.getenv('TOKEN')
bot = TeleBot(bot_token)

GROUP_ID = os.getenv('GROUP_CHAT_ID')
DEPARTMENT = json.loads(os.environ['DEPARTMENT_IDS'])
exit_flag = False  # –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–æ–≤.


def create_keyboard():
    """
    –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    –ü–∞—Ä–∞–º–µ—Ç—Ä exlude - —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –∏—Å–∫–ª—é—á–∏—Ç—å.
    """
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    button_gain = KeyboardButton(GAIN_EMOJI)
    button_duty = KeyboardButton(DUTY_EMOJI)
    button_vacation = KeyboardButton(VACATION_EMOJI)
    button_current_month = KeyboardButton(CURRENT_MONTH)
    button_next_month = KeyboardButton(NEXT_MONTH)
    keyboard.row(button_gain, button_duty, button_vacation)
    keyboard.row(button_current_month, button_next_month)

    return keyboard


@bot.message_handler(commands=['start'])
def start_command(message):
    """–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–æ–¥–æ–±—Ä–µ–Ω"."""
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –≥—Ä—É–ø–ø—ã.
    if message.chat.type in ['group', 'supergroup']:
        group_id = message.chat.id
        response = (
            '–ü—Ä–∏–≤–µ—Ç! üëã\n'
            'ü§ñ: –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.\n\n'
            '‚è±Ô∏è –ï—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É, —Ç–æ –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '
            f'–≤ {NOTIFICATION_TIME.strftime("%H:%M")}\n'
            f'‚è±Ô∏è –£—Ç—Ä–æ–º, –≤ {WEATHER_NOTIFICATION_TIME.strftime("%H:%M")} '
            '–ø—Ä–∏—à–ª—é —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É.\n\n'
            '–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞,\n'
            '–Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: üì≤ @grafik_4o_bot'
        )
        bot.send_message(group_id, response)
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–æ –ª–∏—á–Ω–æ –±–æ—Ç—É.
    elif message.chat.type == 'private':
        user_id = message.chat.id
        if check_department(user_id):
            response = (
                'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞.\n\n'

                '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n'
                f'- {GAIN_EMOJI} –£–∑–Ω–∞—Ç—å –∫–æ–≥–¥–∞ –±—É–¥—É—â–∏–µ —Å–º–µ–Ω—ã\n'
                f'- {DUTY_EMOJI} –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–º –¥–µ–∂—É—Ä—Å—Ç–≤–µ\n'
                f'- {VACATION_EMOJI} –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ—Ç–ø—É—Å–∫–∞ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ\n'
                f'- {CURRENT_MONTH} –£–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü\n'
                f'- {NEXT_MONTH} –ò –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü, –µ—Å–ª–∏ –æ–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω\n'
            )
            bot.send_message(user_id, response, reply_markup=create_keyboard())
        else:
            bot.send_message(
                user_id,
                text=(
                    '–≠—Ç–æ—Ç ü§ñ –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º—É –∫—Ä—É–≥—É –ª–∏—Ü.'
                    '–ß—Ç–æ–±—ã —Ç–µ–±—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏, –æ–±—Ä–∞—Ç–∏—Å—å –∫ @Zulfat_Gafurzyanov'
                )
            )


@bot.message_handler(func=lambda message: message.text == GAIN_EMOJI)
def get_gain(message):
    """–í—ã–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–º–µ–Ω–∞–º."""
    user_id = message.chat.id
    text = create_gain_message(user_id)

    bot.send_message(
        user_id,
        text,
        reply_markup=create_keyboard()
    )


@bot.message_handler(func=lambda message: message.text == DUTY_EMOJI)
def get_duty(message):
    """–í—ã–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–µ–∂—É—Ä—Å—Ç–≤—É."""
    user_id = message.chat.id
    text = create_duty_message(user_id)

    bot.send_message(
        user_id,
        text,
        reply_markup=create_keyboard()
    )


@bot.message_handler(func=lambda message: message.text == VACATION_EMOJI)
def get_vacation(message):
    """–í—ã–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç–ø—É—Å–∫—É."""
    user_id = message.chat.id
    text = create_vacation_message(user_id)

    bot.send_message(
        user_id,
        text,
        reply_markup=create_keyboard()
    )


@bot.message_handler(
        func=lambda message: message.text == CURRENT_MONTH)
def get_current_month_info(message):
    """–í—ã–¥–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É."""
    current_month = MONTHS.get(str(datetime.now().month))
    user_id = message.chat.id
    text = create_month_message(user_id, current_month)

    bot.send_message(
        user_id,
        text,
        reply_markup=create_keyboard()
    )


@bot.message_handler(
        func=lambda message: message.text == NEXT_MONTH)
def get_next_month_info(message):
    """–í—ã–¥–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É."""
    current_month_num = str(datetime.now().month)
    if current_month_num == '12':
        next_month = MONTHS['1']  # –Ø–Ω–≤–∞—Ä—å
    else:
        next_month_num = str(int(current_month_num) + 1)
        next_month = MONTHS[next_month_num]

    user_id = message.chat.id
    text = create_month_message(user_id, next_month)

    bot.send_message(
        user_id,
        text,
        reply_markup=create_keyboard()
    )


@bot.message_handler(func=lambda message: True)
def response_for_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    bot.send_message(
        message.chat.id,
        'ü§ñ: –Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –º–µ–Ω—é.'
    )


def scheduler_gain_thread():
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ç–æ–∫–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.

    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –æ–±—â—É—é –≥—Ä—É–ø–ø—É.
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ª–∏—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    while not exit_flag:
        now = datetime.now().time()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        # –æ —Å–º–µ–Ω–µ –∏–ª–∏ –¥–µ–∂—É—Ä—Å—Ç–≤–µ.
        if now >= NOTIFICATION_TIME:
            try:
                (gain_message,
                 user_gain_list) = create_gain_notification_message()
                (duty_message,
                 user_duty_list) = create_duty_notification_message()

                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —É –∫–æ–≥–æ –∑–∞–≤—Ç—Ä–∞ —Å–º–µ–Ω–∞:
                if user_gain_list:
                    bot.send_message(
                        GROUP_ID,
                        gain_message
                    )
                    logging.info(
                        f'–í –≥—Ä—É–ø–ø—É {GROUP_ID} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ '
                        '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–∞—Ö!'
                    )

                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É –∫–æ–≥–æ –∑–∞–≤—Ç—Ä–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–æ:
                if user_duty_list:
                    # –ò—â–µ–º –µ–≥–æ id –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.
                    for user in user_duty_list:
                        message = duty_message
                        for key, value in DEPARTMENT.items():
                            if user[0] == value:
                                user_id = int(key)
                                # –î–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ: –≤ –¥–µ–Ω—å/–Ω–æ—á—å
                                message += user[1][2]
                                bot.send_message(
                                    user_id,
                                    message
                                )
                                logging.info(
                                    f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ '
                                    '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ!'
                                )

            except Exception as e:
                logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}')

            next_day = datetime.now() + timedelta(days=1)
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:
            next_send_time = datetime.combine(
                next_day.date(), NOTIFICATION_TIME)
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):
            delay_seconds = (next_send_time - datetime.now()
                             ).total_seconds()
            time.sleep(delay_seconds)

        else:
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –µ—â—ë –Ω–µ –ø—Ä–∏—à–ª–æ, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π.
            time.sleep(1)


def scheduler_weather_thread():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ç–æ–∫–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø–æ–≥–æ–¥–µ."""
    while not exit_flag:
        now = datetime.now().time()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ.
        if now >= WEATHER_NOTIFICATION_TIME:
            try:
                weather_message = create_weather_notification_message()
                if weather_message:
                    bot.send_message(
                        GROUP_ID,
                        weather_message
                    )
                    logging.info('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
            except Exception as e:
                logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–≥–æ–¥—ã: {e}')

            next_day = datetime.now() + timedelta(days=1)
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:
            next_send_time = datetime.combine(
                next_day.date(), WEATHER_NOTIFICATION_TIME)
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):
            delay_seconds = (next_send_time - datetime.now()
                             ).total_seconds()
            time.sleep(delay_seconds)
        else:
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –µ—â—ë –Ω–µ –ø—Ä–∏—à–ª–æ, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π.
            time.sleep(1)


def main_polling_thread():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ç–æ–∫–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    global exit_flag  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é False.
    try:
        while not exit_flag:
            bot.infinity_polling(timeout=20, long_polling_timeout=60)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ polling: {e}')


if __name__ == "__main__":
    bot_dir = os.path.dirname(os.path.abspath(__file__))
    log_path = os.path.join(bot_dir, 'main.log')
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:
    logging.basicConfig(
        format=(
            '%(asctime)s - '
            '%(levelname)s - '
            '%(message)s - '
            '%(name)s - '
            '%(funcName)s - '
            '%(lineno)d'
        ),
        level=logging.INFO,
        filename=log_path,
        filemode='w',
        encoding='utf-8',
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤.
    thread_gain_scheduler = threading.Thread(target=scheduler_gain_thread)
    thread_weather_scheduler = threading.Thread(
         target=scheduler_weather_thread)
    thread_polling = threading.Thread(target=main_polling_thread)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ–º–æ–Ω-–ø–æ—Ç–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    thread_gain_scheduler.daemon = True
    thread_weather_scheduler.daemon = True
    thread_polling.daemon = True

    # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤.
    thread_gain_scheduler.start()
    thread_weather_scheduler.start()
    thread_polling.start()

    try:
        # –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.
        input('–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...\n')
    except KeyboardInterrupt:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
    finally:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤.
        exit_flag = True
        # thread_gain_scheduler.join(timeout=5)
        # thread_weather_scheduler.join(timeout=5)
        thread_polling.join(timeout=5)
        logging.info('–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
