import json
import logging
import os
from datetime import datetime
from pathlib import Path

import pandas as pd
from dotenv import load_dotenv

from constants import DUTY_DAY, DUTY_NIGHT, HOLIDAYS, WEEK_DAYS

load_dotenv()
DEPARTMENT = json.loads(os.environ['DEPARTMENT_IDS'])
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
logger = logging.getLogger(__name__)


def check_department(user_id) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–≤—Ä–∞—â–∞–µ–º - True, e—Å–ª–∏ –æ–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω.
    """
    if str(user_id) in DEPARTMENT.keys():
        return True
    return False


def read_xlsx(month_name) -> list:
    """–°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å xlsx —Ñ–∞–π–ª–∞."""
    current_year = datetime.now().year
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤–∏–¥–∞ "–ê–ø—Ä–µ–ª—å_2025.xlsx"
    filepath = f'schedule/{month_name}_{current_year}.xlsx'

    try:
        if not os.path.exists(filepath):
            raise FileNotFoundError(f'–§–∞–π–ª "{filepath}" –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        df = pd.read_excel(filepath)
        data = df.to_dict('records')
        logging.info(f'–ì—Ä–∞—Ñ–∏–∫ –Ω–∞: {month_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω.')
    except FileNotFoundError as fe:
        logging.error(fe)
        return []
    except Exception as e:
        logging.error(e)
    return data


def day_of_the_week(input_date) -> str:
    """–ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏."""
    date = datetime.strptime(input_date, '%d.%m.%Y')
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ (0‚Äî6), –∑–∞—Ç–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ.
    weekday_number = date.weekday()
    weekday = WEEK_DAYS[weekday_number]
    return weekday


def get_holiday(date) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ - –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º."""
    current_month = str(datetime.now().month)
    if int(date) in HOLIDAYS[current_month]:
        return True
    return False


def create_schedule(month_name):
    """
    –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫.
    - –¥–ª—è —Å–º–µ–Ω –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏.
    """
    file = read_xlsx(month_name)

    if not file:
        logging.error('–ì—Ä–∞—Ñ–∏–∫ –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω')
        return {}
    else:
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞:
        schedule = {row['–§–ò–û']: {'—Å–º–µ–Ω–∞': [], '–¥–µ–∂—É—Ä—Å—Ç–≤–æ': [], '–æ—Ç–ø—É—Å–∫': []}
                    for row in file}

        for line in file:
            user_name = line.pop('–§–ò–û')
            for column, value in line.items():
                # –ü—Ä–∏–≤–æ–¥–∏–º —Å—Ç–æ–ª–±–µ—Ü –∫ —Ñ–æ—Ä–º–∞—Ç—É –¥–∞—Ç—ã.
                # –î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω—è –Ω–µ–¥–µ–ª–∏.
                if column.isdigit():
                    column_format = datetime(
                        day=int(column),
                        month=datetime.now().month,
                        year=datetime.now().year,
                    ).strftime('%d.%m.%Y')

                    # –ò—â–µ–º —Å–º–µ–Ω—É:
                    if value == '+':
                        # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.
                        gain_weekday = day_of_the_week(column_format)
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ–Ω—É –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –Ω–∞:
                        # —Å—É–±–±–æ—Ç—É, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏–ª–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫:
                        if gain_weekday in WEEK_DAYS[5:] or (
                            get_holiday(column)
                        ):
                            schedule[user_name]['—Å–º–µ–Ω–∞'].append(
                                (int(column), gain_weekday))

                    # –ò—â–µ–º –¥–µ–∂—É—Ä—Å—Ç–≤–∞:
                    elif value in (DUTY_NIGHT+DUTY_DAY):
                        duty_weekday = day_of_the_week(column_format)
                        if value in DUTY_NIGHT:
                            duty_time = 'üåë –≤ –Ω–æ—á—å'
                        else:
                            duty_time = '‚òÄÔ∏è –≤ –¥–µ–Ω—å'
                        schedule[user_name]['–¥–µ–∂—É—Ä—Å—Ç–≤–æ'].append(
                                (int(column), duty_weekday, duty_time))

                    # –ò—â–µ–º –æ—Ç–ø—É—Å–∫:
                    elif '–æ—Ç–ø—É—Å–∫' in str(value):
                        schedule[user_name]['–æ—Ç–ø—É—Å–∫'].append((value))
                else:
                    continue

        return schedule


def get_schedule(month) -> dict:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –≤ —Ñ–∞–π–ª –∏ –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º.
    current_year = datetime.now().year
    SCHEDULE_FILE = f'schedule/json/{month}_{current_year}.json'

    try:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if Path(SCHEDULE_FILE).is_file():
            with open(SCHEDULE_FILE, 'r', encoding='utf-8') as f:
                content = f.read()

                # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
                if len(content.strip()) == 2:  # len({}) == 2
                    schedule_json = create_schedule(month)
                    with open(SCHEDULE_FILE, 'w', encoding='utf-8') as file:
                        json.dump(
                            schedule_json, file, ensure_ascii=False, indent=4)
                else:
                    # –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–º–µ—é—â–∏–π—Å—è –≥—Ä–∞—Ñ–∏–∫
                    schedule_json = json.loads(content)
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ
            schedule_json = create_schedule(month)
            with open(SCHEDULE_FILE, 'w', encoding='utf-8') as file:
                json.dump(schedule_json, file, ensure_ascii=False, indent=4)

        return schedule_json

    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞: {e}')

    return {}
