import json
import logging
import os
from datetime import datetime, timedelta

from dotenv import load_dotenv

from constants import (
    DUTY_EMOJI,
    GAIN_EMOJI,
    MONTHS,
    VACATION_EMOJI,
    WEATHER_TIMES
)
from notification import create_notification_list, parse_weather_notification
from utils import get_schedule

load_dotenv()
DEPARTMENT = json.loads(os.environ['DEPARTMENT_IDS'])
BOSS_LIST = json.loads(os.environ['BOSS_LIST'])


def create_gain_message(user_id) -> str:
    """–°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Å–º–µ–Ω–∞–º."""
    today = datetime.now().day
    current_month = MONTHS.get(str(datetime.now().month))
    schedule = get_schedule(current_month)

    # –ü–æ–ª—É—á–∞–µ–º –§.–ò.–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É:
    user_name = DEPARTMENT.get(str(user_id))
    user_gains = []
    if schedule:
        user_gains = schedule[user_name]['—Å–º–µ–Ω–∞']
        boss_gains = {}  # –°–æ–∑–¥–∞–ª–∏ —Å–ª–æ–≤–∞—Ä—å —Å–º–µ–Ω –±–æ—Å–æ–≤.
        for boss in BOSS_LIST:
            boss_gains[boss] = schedule[boss]['—Å–º–µ–Ω–∞']
    else:
        message = f'–ì—Ä–∞—Ñ–∏–∫ –Ω–∞ {current_month} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'
        return message

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:
    future_gains = False  # –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö —Å–º–µ–Ω.
    message = f'{GAIN_EMOJI} C–º–µ–Ω—ã –Ω–∞ {current_month}:\n'

    if user_gains:
        for [date, weekday] in user_gains:
            formated_date = f'- {int(date)} ({weekday}) '

            if int(date) >= today:  # –ü—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º.
                future_gains = True
                message += f'\n{formated_date}, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: '
                for boss, gains in boss_gains.items():
                    if [date, weekday] in gains:
                        message += f'{boss}, '
                # –£–±–∏—Ä–∞–µ–º: ", " —É –∫—Ä–∞–π–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ.
                message = message[:-2]

    else:
        future_gains = False

    if not future_gains:
        message += '‚úÖ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.'
    return message


def create_duty_message(user_id) -> str:
    """–°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º."""
    today = datetime.now().day
    current_month = MONTHS.get(str(datetime.now().month))
    schedule = get_schedule(current_month)

    # –ü–æ–ª—É—á–∞–µ–º –§.–ò.–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É:
    user_name = DEPARTMENT.get(str(user_id))
    user_duties = []
    if schedule:
        user_duties = schedule[user_name]['–¥–µ–∂—É—Ä—Å—Ç–≤–æ']
    else:
        message = f'–ì—Ä–∞—Ñ–∏–∫ –Ω–∞ {current_month} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'
        return message

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:
    future_duties = False  # –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö —Å–º–µ–Ω.
    message = f'{DUTY_EMOJI} –î–µ–∂—É—Ä—Å—Ç–≤–∞ –Ω–∞ {current_month}:\n\n'

    if user_duties:
        for (date, weekday, time) in user_duties:
            formated_date = f'- {int(date)} ({weekday}), {time} '

            if int(date) >= today:  # –ü—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º.
                future_duties = True
                message += f'{formated_date}\n'
    else:
        future_duties = False

    if not future_duties:
        message += '‚úÖ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.'
    return message


def create_vacation_message(user_id) -> str:
    """–°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–ø—É—Å–∫–µ."""
    current_month = MONTHS.get(str(datetime.now().month))
    schedule = get_schedule(current_month)

    # –ü–æ–ª—É—á–∞–µ–º –§.–ò.–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É:
    user_name = DEPARTMENT.get(str(user_id))
    if schedule:
        user_vacation = schedule[user_name]['–æ—Ç–ø—É—Å–∫']
    else:
        message = f'–ì—Ä–∞—Ñ–∏–∫ –Ω–∞ {current_month} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'
        return message

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:
    message = str()
    if not user_vacation:
        message += f'{current_month}: üòî –æ—Ç–ø—É—Å–∫–∞ –Ω–µ—Ç.'
    else:
        for vacation in user_vacation:
            message += f'{VACATION_EMOJI} {vacation.capitalize()}\n'

    return message


def create_month_message(user_id, month):
    """
    –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞.
    """
    schedule = get_schedule(month)  # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞—Ñ–∏–∫.
    if not schedule:
        message = f'–ì—Ä–∞—Ñ–∏–∫ –Ω–∞ {month} –µ—â–µ –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω'
        return message

    # –ü–æ–ª—É—á–∞–µ–º –§.–ò.–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É:
    user_name = DEPARTMENT.get(str(user_id))
    user_shedule = schedule[user_name]

    message = f'–ì—Ä–∞—Ñ–∏–∫ –Ω–∞ {month}:\n'

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–º–µ–Ω—ã:
    gain_list = user_shedule['—Å–º–µ–Ω–∞']
    if gain_list:
        message += f'\n{GAIN_EMOJI} C–º–µ–Ω—ã:\n'
        for (date, weekday) in gain_list:
            formated_date = f'- {int(date)} ({weekday}) '
            message += f'{formated_date}\n'
    else:
        message += f'{GAIN_EMOJI} C–º–µ–Ω—ã:‚úÖ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n\n'

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –¥–µ–∂—É—Ä—Å—Ç–≤–∞:
    duty_list = user_shedule['–¥–µ–∂—É—Ä—Å—Ç–≤–æ']
    if duty_list:
        message += f'\n{DUTY_EMOJI} –î–µ–∂—É—Ä—Å—Ç–≤–∞:\n'
        for (date, weekday, time) in duty_list:
            formated_date = f'- {int(date)} ({weekday}), {time} '
            message += f'{formated_date}\n'
    else:
        message += f'\n{DUTY_EMOJI} –î–µ–∂—É—Ä—Å—Ç–≤–∞:‚úÖ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n'

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –æ—Ç–ø—É—Å–∫–∞:
    vacation_list = user_shedule['–æ—Ç–ø—É—Å–∫']
    if vacation_list:
        for vacation in vacation_list:
            message += f'\n{VACATION_EMOJI} {vacation.capitalize()}\n'
    else:
        message += '\nüòî –æ—Ç–ø—É—Å–∫–∞ –Ω–µ—Ç.'

    return message


def create_gain_notification_message():
    """
    –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ.
    """
    next_day = datetime.now() + timedelta(days=1)  # –ù–∞–ø—Ä–∏–º–µ—Ä: 16
    next_day_format = next_day.strftime('%d.%m.%Y')  # –ù–∞–ø—Ä–∏–º–µ—Ä: 16.04.2025
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É –∫–æ–≥–æ –∑–∞–≤—Ç—Ä–∞ —Å–º–µ–Ω–∞.
    user_list, _ = create_notification_list()

    # C–æ–æ–±—â–µ–Ω–∏–µ c –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º:
    boss_list = []
    employee_list = []
    for user in user_list:
        if user in BOSS_LIST:
            boss_list.append(user)
        else:
            employee_list.append(user)
    message_with_boss = ', '.join(boss_list)

    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
    message = (f'{GAIN_EMOJI} –ó–∞–≤—Ç—Ä–∞ {next_day_format}\n\n'
               'C–º–µ–Ω–∞ —É —Å–ª–µ–¥—É—é—â–∏—Ö –ª–∏—Ü:\n')
    message += '\n'.join(f'- {name}' for name in employee_list)
    message += f'\n\n–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {message_with_boss}'
    return message, user_list


def create_duty_notification_message():
    """
    –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ.
    """
    next_day = datetime.now() + timedelta(days=1)  # –ù–∞–ø—Ä–∏–º–µ—Ä: 16
    next_day_format = next_day.strftime('%d.%m.%Y')  # –ù–∞–ø—Ä–∏–º–µ—Ä: 16.04.2025
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É –∫–æ–≥–æ –∑–∞–≤—Ç—Ä–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–æ.
    _, user_list = create_notification_list()

    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
    message = (f'{DUTY_EMOJI} –ó–∞–≤—Ç—Ä–∞ {next_day_format}\n\n '
               '–£ —Ç–µ–±—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–µ–∂—É—Ä—Å—Ç–≤–æ: ')
    return message, user_list


def create_weather_notification_message():
    """
    –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ.
    """
    today = datetime.now().strftime("%d.%m.%Y")

    weather_list, temperatures_list = parse_weather_notification()
    message = ''
    if weather_list and temperatures_list:
        message = (
            f'–°–µ–≥–æ–¥–Ω—è: {today}\n\n'
            'üí´–ü–æ–≥–æ–¥–∞ –∑–∞ –æ–∫–Ω–æ–º:\n\n'
        )

        for index in range(len(WEATHER_TIMES)):
            time = WEATHER_TIMES[index]
            description = weather_list[index]
            temperature = temperatures_list[index]
            temperature_mess = f't={temperature} ¬∞C'
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ç–ª–≥.
            if len(temperature_mess) == 6:
                temperature_mess += '   '
            elif len(temperature_mess) == 7:
                temperature_mess += ' '
            message += (
                f'{time}:        {temperature_mess}       {description}\n'
            )

    return message
